syntax = "proto3";

package WeatherSensorEmulatorService;

option csharp_namespace = "TestIServe.Contracts.WeatherSensorEmulatorService";

service WeatherSensorEmulator {
  rpc StreamCommand (stream RequestSubscribeUnsubscribe) returns ( stream ResponseSensorsData);
  rpc GetAverageTemperature (RequestAggreagationData) returns (ResponseParam);
  rpc GetAverageHumidifier (RequestAggreagationData) returns (ResponseParam);
  rpc GetMinCarbonDioxideContent (RequestAggreagationData) returns (ResponseParam);
  rpc GetMaxCarbonDioxideContent (RequestAggreagationData) returns (ResponseParam);

  rpc GetAggregatedData (RequestAggreagationData) returns (AggregatedSensorData);

  rpc GetAllData(RequestReadAllAggregatedData) returns (stream AggregatedSensorDataSlice);
}

message RequestReadAllAggregatedData
{
    string clientId = 1;
}

message AggregatedSensorDataSlice
{
  string id = 1;
  int64 sliceTime = 2;
  AggregatedSensorData  aggreagateSensorData = 3;
}

message AggregatedSensorData
{
  float TemperatureAverage = 1;
  float HumidifierAverage = 2;
  float CarbonDioxideContentMin = 3;
  float CarbonDioxideContentMax = 4;
}

message RequestAggreagationData
{
  string id = 1;
  int64 fromTime = 2;
  int32 countMinutes = 3;
}

message ResponseParam
{
  bool isHaveValue = 1;
  float value = 2; 
}

message RequestSubscribeUnsubscribe
{
  string clientId = 1;
  TypeOperation operation = 2;
  repeated string sensorsId = 3;
}

message ResponseSensorsData 
{
  string clientId = 1;
  repeated SensorDto sensorsDto = 2;
}

message SensorDto
{
    string sensorId = 1;
    int64 time = 2;
    float temperature = 3;
    float humidifier = 4;
    float carbonDioxideContent = 5;
}

// Тип операции
enum TypeOperation {
    none = 0;
    subscribe = 1;
    unsubscribe = 2;
}