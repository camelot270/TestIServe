// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeatherSensorEmulator.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TestIServe.Contracts.WeatherSensorEmulatorService {
  public static partial class WeatherSensorEmulator
  {
    static readonly string __ServiceName = "WeatherSensorEmulatorService.WeatherSensorEmulator";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe> __Marshaller_WeatherSensorEmulatorService_RequestSubscribeUnsubscribe = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData> __Marshaller_WeatherSensorEmulatorService_ResponseSensorsData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData> __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> __Marshaller_WeatherSensorEmulatorService_ResponseParam = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData> __Marshaller_WeatherSensorEmulatorService_AggregatedSensorData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData> __Marshaller_WeatherSensorEmulatorService_RequestReadAllAggregatedData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice> __Marshaller_WeatherSensorEmulatorService_AggregatedSensorDataSlice = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData> __Method_StreamCommand = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamCommand",
        __Marshaller_WeatherSensorEmulatorService_RequestSubscribeUnsubscribe,
        __Marshaller_WeatherSensorEmulatorService_ResponseSensorsData);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> __Method_GetAverageTemperature = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAverageTemperature",
        __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData,
        __Marshaller_WeatherSensorEmulatorService_ResponseParam);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> __Method_GetAverageHumidifier = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAverageHumidifier",
        __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData,
        __Marshaller_WeatherSensorEmulatorService_ResponseParam);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> __Method_GetMinCarbonDioxideContent = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMinCarbonDioxideContent",
        __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData,
        __Marshaller_WeatherSensorEmulatorService_ResponseParam);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> __Method_GetMaxCarbonDioxideContent = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMaxCarbonDioxideContent",
        __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData,
        __Marshaller_WeatherSensorEmulatorService_ResponseParam);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData> __Method_GetAggregatedData = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAggregatedData",
        __Marshaller_WeatherSensorEmulatorService_RequestAggreagationData,
        __Marshaller_WeatherSensorEmulatorService_AggregatedSensorData);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice> __Method_GetAllData = new grpc::Method<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllData",
        __Marshaller_WeatherSensorEmulatorService_RequestReadAllAggregatedData,
        __Marshaller_WeatherSensorEmulatorService_AggregatedSensorDataSlice);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TestIServe.Contracts.WeatherSensorEmulatorService.WeatherSensorEmulatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WeatherSensorEmulator</summary>
    [grpc::BindServiceMethod(typeof(WeatherSensorEmulator), "BindService")]
    public abstract partial class WeatherSensorEmulatorBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamCommand(grpc::IAsyncStreamReader<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe> requestStream, grpc::IServerStreamWriter<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageTemperature(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageHumidifier(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMinCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMaxCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData> GetAggregatedData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetAllData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData request, grpc::IServerStreamWriter<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WeatherSensorEmulator</summary>
    public partial class WeatherSensorEmulatorClient : grpc::ClientBase<WeatherSensorEmulatorClient>
    {
      /// <summary>Creates a new client for WeatherSensorEmulator</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WeatherSensorEmulatorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WeatherSensorEmulator that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WeatherSensorEmulatorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WeatherSensorEmulatorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WeatherSensorEmulatorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData> StreamCommand(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamCommand(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData> StreamCommand(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamCommand, null, options);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetAverageTemperature(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAverageTemperature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetAverageTemperature(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAverageTemperature, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageTemperatureAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAverageTemperatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageTemperatureAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAverageTemperature, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetAverageHumidifier(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAverageHumidifier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetAverageHumidifier(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAverageHumidifier, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageHumidifierAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAverageHumidifierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetAverageHumidifierAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAverageHumidifier, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetMinCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinCarbonDioxideContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetMinCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMinCarbonDioxideContent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMinCarbonDioxideContentAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinCarbonDioxideContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMinCarbonDioxideContentAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMinCarbonDioxideContent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetMaxCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMaxCarbonDioxideContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam GetMaxCarbonDioxideContent(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMaxCarbonDioxideContent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMaxCarbonDioxideContentAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMaxCarbonDioxideContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam> GetMaxCarbonDioxideContentAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMaxCarbonDioxideContent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData GetAggregatedData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAggregatedData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData GetAggregatedData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAggregatedData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData> GetAggregatedDataAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAggregatedDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData> GetAggregatedDataAsync(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAggregatedData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice> GetAllData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice> GetAllData(global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WeatherSensorEmulatorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WeatherSensorEmulatorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WeatherSensorEmulatorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamCommand, serviceImpl.StreamCommand)
          .AddMethod(__Method_GetAverageTemperature, serviceImpl.GetAverageTemperature)
          .AddMethod(__Method_GetAverageHumidifier, serviceImpl.GetAverageHumidifier)
          .AddMethod(__Method_GetMinCarbonDioxideContent, serviceImpl.GetMinCarbonDioxideContent)
          .AddMethod(__Method_GetMaxCarbonDioxideContent, serviceImpl.GetMaxCarbonDioxideContent)
          .AddMethod(__Method_GetAggregatedData, serviceImpl.GetAggregatedData)
          .AddMethod(__Method_GetAllData, serviceImpl.GetAllData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WeatherSensorEmulatorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamCommand, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestSubscribeUnsubscribe, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseSensorsData>(serviceImpl.StreamCommand));
      serviceBinder.AddMethod(__Method_GetAverageTemperature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(serviceImpl.GetAverageTemperature));
      serviceBinder.AddMethod(__Method_GetAverageHumidifier, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(serviceImpl.GetAverageHumidifier));
      serviceBinder.AddMethod(__Method_GetMinCarbonDioxideContent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(serviceImpl.GetMinCarbonDioxideContent));
      serviceBinder.AddMethod(__Method_GetMaxCarbonDioxideContent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.ResponseParam>(serviceImpl.GetMaxCarbonDioxideContent));
      serviceBinder.AddMethod(__Method_GetAggregatedData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestAggreagationData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorData>(serviceImpl.GetAggregatedData));
      serviceBinder.AddMethod(__Method_GetAllData, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::TestIServe.Contracts.WeatherSensorEmulatorService.RequestReadAllAggregatedData, global::TestIServe.Contracts.WeatherSensorEmulatorService.AggregatedSensorDataSlice>(serviceImpl.GetAllData));
    }

  }
}
#endregion
